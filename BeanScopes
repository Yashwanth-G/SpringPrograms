/* This file explains about the bean scope - lifecycle of a bean in spring environment :
****
*   The default scope for bean is "SINGLETON"
*       * Spring container creates only one instance of the bean, by default
*       * It is cached in memory 
*       * All requests for the bean: 
*       *     * will return a shared reference to the same bean 
*   The additional Spring bean scopes are:
*    *   singleton:       Create a single shared instance of the bean. This is Default scope.
*    *   prototype:       Creates a new bean instance for each container request.
*    *   request:         Scoped to an HTTP web request. Only used for web apps.
*    *   session:         Scoped to an HTTP web session. Only used for web apps.
*    *   global-session:  Scoped to a global HTTP web session. Only used for web apps.
****
*/


//Demo program for singleton scope that is default scope

//Driver code 

package com.yashcode.springdemo;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanScopeDemoApp {

	public static void main(String[] args) {
  
		// load the spring configuration file 
		ClassPathXmlApplicationContext context = new 
				ClassPathXmlApplicationContext("beanScope-applicationContext.xml");
		
		
		//retrieve bean from spring container
		Coach theCoach = context.getBean("myCoach",Coach.class);
		
		Coach alphaCoach = context.getBean("myCoach",Coach.class);
		
		//check if they are the sharing the same bean
		boolean result = (theCoach == alphaCoach);
		
		//print the results 
		System.out.println("\nPointing to the same object: "+result);
		
		System.out.println("\nMemory location for theCoach: "+theCoach);
		
		System.out.println("\nMemory location for alphaCoach: "+alphaCoach + "\n");
		
		//close the context 
		context.close();
	}
}

//Configuration file 

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
	
	
	<bean id = "myFortuneService" 
		class="com.yashcode.springdemo.HappyFortuneService">
	</bean>

	<bean id="myCoach"
		class = "com.yashcode.springdemo.TrackCoach">
		<!-- Constructor Injection -->
		<constructor-arg ref ="myFortuneService"/>
	</bean>
</beans>






//Demo program for prototype scope 

//Config file 

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
	
	
	<bean id = "myFortuneService" 
		class="com.yashcode.springdemo.HappyFortuneService">
	</bean>

	<bean id="myCoach"
		class = "com.yashcode.springdemo.TrackCoach"
		scope="prototype">
		
		<!-- Constructor Injection -->
		<constructor-arg ref ="myFortuneService"/>
	</bean>	
</beans>


//Driver class 

package com.yashcode.springdemo;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanScopeDemoApp {

	public static void main(String[] args) {
		// load the spring configuration file 
		ClassPathXmlApplicationContext context = new 
				ClassPathXmlApplicationContext("beanScope-applicationContext.xml");
		
		
		//retrieve bean from spring container
		Coach theCoach = context.getBean("myCoach",Coach.class);
		
		Coach alphaCoach = context.getBean("myCoach",Coach.class);
		
		//check if they are the sharing the same bean
		boolean result = (theCoach == alphaCoach);
		
		//print the results 
		System.out.println("\nPointing to the same object: "+result);
		
		System.out.println("\nMemory location for theCoach: "+theCoach);
		
		System.out.println("\nMemory location for alphaCoach: "+alphaCoach + "\n");
		
		//close the context 
		context.close();
	}
}













